#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Standardize the results.csv to the OpenPowerlifting
# internal format.
#

import sys
from os.path import join,realpath,dirname
sys.path.append(join(dirname(dirname(dirname(realpath(__file__)))),"scripts"))

from oplcsv import Csv
import re

import oplcsv
import sys


def die(s):
    print(s, file=sys.stderr)
    sys.exit(1)


# Given the array of lines, split it up into an array per-sheet.
def split_by_sheet(lines):
    for ii in range(len(lines)):
        if 'Sheet' in lines[ii][0]:
            break
    assert ii < len(lines)
    assert 'Sheet' in lines[ii][0]

    sheetlist = []
    sheet = None

    start_ii=ii

    event_types =['only bench press','only deadlift','full power','single bench press','single deadlift',
    'push & pull','bench press','станова тяга','жим штанги лежачи','bench press (single)','deadlift (single)','жим без экипировки']

    exclude_text = ['multy','багатоповторний']

    for ii in range(start_ii,len(lines)):
        line = lines[ii]
        # If this line starts a new sheet, generate a new array.
        if 'Sheet' in line[0]:
            sheet = []
            sheetlist.append(sheet)
            sheet.append(line)
        elif any(event in ''.join(line[0]).lower() for event in event_types) and not any(event in''.join(line[0]).lower()for event in exclude_text) and ii >start_ii+6 :
            if len(sheet) <3 or not any(is_header(test_line) for test_line in sheet): #Then this is the event listing for an exisiting sheet, Replace the title with it
                sheet[0][0]='Sheet : '+''.join(line[0]).lower()
            else: #Start a new sheet
                sheet = []
                sheetlist.append(sheet)
                sheet.append(['Sheet : ' +''.join(line[0])])

                #Check that this sheet has a header
                if not is_header(lines[ii+1]) and not is_header(lines[ii+2]) :
                    sheet.append(sheetlist[-2][get_header_linenum(sheetlist[-2])]) #Use the previous sheets header
                    #Change the attempt labels to the right events

        elif 'results in pounds' in ''.join(line[0]).lower() or ''.join(line[0]) == 'MULTY REP BENCH' or 'багатоповторний' in ''.join(line[0]).lower():
            break
        else:
            sheet.append(line)
    return sheetlist


# Given the name of a sheet, return a dictionary describing the sheet.
def parse_sheetname(s):
    obj = {}
    event = None
    amateur = 'Pro' # By default, unless otherwise specified.
    tested = '' # By default, unless otherwise specified.
    equipment = 'Wraps' # By default, unless otherwise specified.

    s=s.replace(' & ','&')
    s=s.replace('-','')
  
    if 'без екіпірування' in s:
        equipment = 'Raw'
        s=s.replace('без екіпірування','').strip()


    s = s.replace("(","").replace(")","").strip()
    # Parse word-by-word to make sure that every word is understood. 
    for word in s.lower().split():
        
        # Events
        if word == 'пл' or word == 'пауэрлифтинг' or word == 'pl' or word =='power' or word =='powerlifting':
            assert not event or event =='SBD'
            event = 'SBD'
        elif word == 'жим' or word =='им' or word=='bench':
            assert not event or event == 'B'
            event = 'B'
            if equipment == 'Wraps':
                equipment = 'Raw'
        elif word == 'тяга' or word == 'deadlift':
            assert not event
            event = 'D'
            if equipment == 'Wraps':
                equipment = 'Raw'
        elif word == 'двоеборье' or word =='push&pull':
            assert not event
            event = 'BD'
            if equipment == 'Wraps':
                equipment = 'Raw'

        # Equipment
        elif word == 'однослой':
            equipment = 'Single-ply'
        elif word == 'экипировке':
            equipment = 'Multi-ply'

        # Booleans.
        elif word == 'люб.' or word == 'любители':
            amateur = 'Amateur'
        elif word == 'pro':
            assert amateur == 'Pro'
        elif word == 'дк' or word == 'д_к':
            tested = 'Tested'

        # Grammatical ignorables.
        elif word == 'в':
            pass
        elif word == 'лежа':
            pass
        elif word == 'про':
        	pass
        
        elif word == 'протокол': #Results
            pass


        # Other ignorables.
        elif word == 'сфо': # Not sure.
            pass
        elif word == 'станова': # First word in 'deadlift'.
            pass
        elif word == 'raw':
            pass
        elif word == 'штанги': #Barbell
            pass
        elif word == 'лежачи': #Lying (as in bench)
            pass
        elif word == 'single':
            pass
        elif word == 'press':
            pass
        elif word == 'only':
            pass
        elif word == 'full':
            pass
        elif word =='bdl':
            pass
        elif word == 'results':
            pass
        else:
            die('Fix parse_sheetname(): Unknown word "%s" in "%s"' % (word, s))

    obj['event'] = event
    obj['amateur'] = amateur
    obj['tested'] = tested
    obj['equipment'] = equipment

    return obj


# Find the line that contains column information (the line below does also).
def get_header_linenum(sheet):
    for i in range(len(sheet)):
        if is_header(sheet[i]):
            return i
    die("get_header_linenum() failed to find the header.")


#Returns whether a line is a header
def is_header(line):
    if len(line) >1 and line[1] in ['П.І.','Имя','NAME','Name',"Прізвище та ім'я",'Nme','Name Surname','Фамилия и имя',"Прізвище/Ім'я"]:
            return True
    return False

def parse_fieldnames(sheet):
    fieldnames = []
    headernum = get_header_linenum(sheet)
    header = sheet[headernum]

    # Name all the columns.
    iterable = iter(range(len(header)))

    #First column is place, has no label
    next(iterable)
    fieldnames.append('Place')
    for i in iterable:
        text = header[i]
        text=text.replace('.',' ')
        text =text.replace('  ',' ')
        text = text.replace('*','')
        text=text.lower().strip()

        if text == 'место':
            fieldnames.append('Place')
        elif text in ['п і','имя',"прізвище та ім'я",'nme','name surname','name',"прізвище/ім'я"]:
            fieldnames.append('InternationalName')
        elif text in ['city','місто','місце','регіон']: #City /region
            fieldnames.append('IGNORE')
        elif text in ['город','city / team','city \ club','city / club','спорт клуб','клуб'] : #Home city/gym
            fieldnames.append('IGNORE')
        elif text in ['дата народ','день рождения','db','дата народження','birthday','bp','bd','date of birth']: #Birthdate
            fieldnames.append('BirthDate')
        elif any(check_str in text for check_str in ['власна вага','вес','pw','weight','вл вага']): #Bodyweight
            fieldnames.append('BodyweightKg')
        elif any(check_str in text for check_str in ['сума по коеф','абсолют','coef','коеф','best','absolut']): #Wilks
            fieldnames.append('IGNORE')
        elif text in ['виконаний норматив','викон норматив','вик норматив впа україна']: #Some kind of points?
            fieldnames.append('IGNORE')
        elif text in ['страна','country','країна','coutry','contry']: #Country
            fieldnames.append('Country')
        elif any(check_str in text for check_str in ['звание','rank','звання','class','classif']): #Rank
            fieldnames.append('IGNORE')
        elif text == 'best of the best':
            fieldnames.append('IGNORE')
        elif text in ['тренера','coach','coaches','тренер','тренери','країна']: #Coach
            fieldnames.append('IGNORE')
        elif text == 'вікова категорія':
            fieldnames.append('Division')
        elif text == 'сп тов': #Not sure
            fieldnames.append('IGNORE')
        elif text == 'дюсш': #Youth?
            fieldnames.append('IGNORE')
        elif text == 'к шварца малоуна': #Wilks coefficient
            fieldnames.append('IGNORE')

        elif text in ['сумма','total','result','результат','results','total sum','сума','підсумок']:
            fieldnames.append('TotalKg')

        elif text in ['присед 1','sq 1','squat 1','присід 1']:
            assert header[i+1].lower() in ['присед 2','sq 2','squat 2','присід 2']
            assert header[i+2].lower() in ['присед 3','sq 3','squat 3','присід 3']
            fieldnames.append('Squat1Kg')
            fieldnames.append('Squat2Kg')
            fieldnames.append('Squat3Kg')
            if header[i+3] == 'Сумма':
                fieldnames.append('BestSquatKg')
                [next(iterable) for x in range(3)]
            elif header[i+3].lower() in ['присед 4','sq 4','squat 4','присід 4']:
                fieldnames.append('Squat4Kg')
                [next(iterable) for x in range(3)]
        elif text in ['жим 1','bp 1','benchpress 1','bp1']:
            assert header[i+1].lower() in ['жим 2','bp 2','benchpress 2','bp2']
            assert header[i+2].lower() in ['жим 3','bp 3','benchpress 3','bp3']
            fieldnames.append('Bench1Kg')
            fieldnames.append('Bench2Kg')
            fieldnames.append('Bench3Kg')
            if header[i+3].lower() == 'сумма':
                fieldnames.append('BestBenchKg')
                [next(iterable) for x in range(3)]
            elif header[i+3].lower() in ['жим 4','bp 4','benchpress 4','bp4']:
                fieldnames.append('Bench4Kg')
                [next(iterable) for x in range(3)]

        elif text in ['тяга 1','dl 1','deadlift 1']:
            assert header[i+1].lower() in ['тяга 2','dl 2','deadlift 2']
            assert header[i+2].lower() in ['тяга 3','dl 3','deadlift 3']
            fieldnames.append('Deadlift1Kg')
            fieldnames.append('Deadlift2Kg')
            fieldnames.append('Deadlift3Kg')
            if header[i+3].lower() == 'сумма':
                fieldnames.append('BestDeadliftKg')
                [next(iterable) for x in range(3)]
            elif header[i+3].lower() in ['тяга 4','dl 4','deadlift 4']:
                fieldnames.append('Deadlift4Kg')
                [next(iterable) for x in range(3)]

        elif text == '':
            fieldnames.append('IGNORE')

        else:
            die('Fix parse_fieldnames(): Unknown column header text: "%s"' % text)

    return fieldnames


# Given a list of lines all of which belong to the same sheet, parse that
# into an OpenPowerlifting-style CSV.
def parse_sheet(sheet):
    assert 'Sheet' in sheet[0][0]
    assert sheet[0][0].count(':') == 1

    csv = oplcsv.Csv()

    title=sheet[0][0].lower()
    # Ignore some sheets that don't contain any powerlifting.
    if 'багатоповторний'  in title or 'multy' in title: #Multiple- probably bench for reps
        return csv



    # Figure out event, equipment, etc., and store in obj.
    obj = parse_sheetname(sheet[0][0].split(':')[1])

    # Look through the sheet for column information and mark up the CSV.
    # All columns are given a name -- the extra ones are removed later.
    csv.fieldnames = parse_fieldnames(sheet)


    #No events listed in sheet titles, see if we can reconstruct them from the header
    if obj['event'] == None:
        event = ''
        if 'Squat1Kg' in csv.fieldnames:
            event += 'S'
        if 'Bench1Kg' in csv.fieldnames:
            event += 'B'
        if 'Deadlift1Kg' in csv.fieldnames:
            event +='D'
        if event != '':
            obj['event']=event

    # The WeightClassKg information is stateful, between rows.
    assert not 'WeightClassKg' in csv.fieldnames
    csv.fieldnames.append('WeightClassKg')
    if not 'Division' in csv.fieldnames:
        csv.fieldnames.append('Division')
    assert not 'Sex' in csv.fieldnames
    csv.fieldnames.append('Sex')
    assert not 'Event' in csv.fieldnames
    csv.fieldnames.append('Event')
    assert not 'Equipment' in csv.fieldnames
    csv.fieldnames.append('Equipment')
    csv.fieldnames.append('Amateur')
    csv.fieldnames.append('Tested')

    weightclass = None
    division = None
    sex = None
    equipment = None
    amateur = None


    #There's often a bunch of nonsense at the bottom
    end_line = len(sheet)
    for ii in range(len(sheet)-1,0,-1):
        if len([c for c in sheet[ii] if c !='']) > 3:
            break
        else:
            end_line = ii


    # Iterate over each line, skipping the two header lines.
    for line in sheet[get_header_linenum(sheet)+1:end_line]:
        text = ''.join(line).lower()

        # Skip empty lines.
        if text == '':
            continue

        # Detect lines that set WeightClassKg state.
        if ' кг' in text or ' kg' in text:

            weightclass = ''.join(re.findall(r"(\d*\.\d+)|(\d+|\+)",text)[0])
            continue


        # Sex and division are given between lifter rows
        if any(search_str in  text for search_str in['жен. (','woman (','female','women.','женщины']):
            sex = 'F'
            if '(' in text:
                division = re.findall(r"\((.*?)\)",text)[0]
            else:
                division = ''
            continue
        elif any(search_str in text for search_str in ['муж. (','men (','male','men.','мужчины']):
            sex = 'M'
            if '(' in text:
                division = re.findall(r"\((.*?)\)",text)[0]
            else:
                division = ''
            continue

        #Equipment and amateur/pro are given between rows
        if 'raw' in text:
            text.replace('amatur',"amateur")
            if 'S' in obj['event']:
                obj['equipment'] = 'Wraps'
            else:
                obj['equipment']='Raw'
            if 'amateur' in text or 'pro' in text:
                obj['amateur'] = text.split()[-1].title()
            if 'doping tested' in text:
                obj['tested'] = 'Yes'
            elif 'not tested' in text:
                obj['tested'] = 'No'
            continue
        elif 'eq' in text:
            text.replace('amatur',"amateur")
            obj['equipment'] = 'Multi-ply'
            if 'amateur' in text or 'pro' in text:
                obj['amateur'] = text.split()[-1].title()
            if 'doping tested' in text:
                obj['tested'] = 'Yes'
            elif 'not tested' in text:
                obj['tested'] = 'No'
            continue 

        # If we've made it this far, the line should be for a lifter!
        # Make sure they have a name!
        if not line[csv.index('InternationalName')]:
            continue
        line.append(weightclass)
        line.append(division)
        line.append(sex)
        line.append(obj['event'])
        line.append(obj['equipment'])
        line.append(obj['amateur'])
        line.append(obj['tested'])

        assert len(line) == len(csv.fieldnames)
        csv.rows.append(line)

    # Remove all the columns named 'IGNORE' before returning the CSV for integration.
    while 'IGNORE' in csv.fieldnames:
        csv.remove_column_by_name('IGNORE')

    unreverse_names(csv)

        
    return csv


# Handles the Division and Age columns, which looks like below:
#   Открытая 20-23 (21.11.1986)/30
# Converts to English and separates into Division and Age columns.
def standardize_division_age(csv):
    assert 'Tested' in csv.fieldnames
    assert 'Amateur' in csv.fieldnames
    assert 'Division' in csv.fieldnames
    assert 'BirthDate' in csv.fieldnames

    csv.append_columns(['BirthYear'])
    
    dividx = csv.index('Division')
    bdidx = csv.index('BirthDate')
    byidx = csv.index('BirthYear')
    amateuridx = csv.index('Amateur')
    testedidx = csv.index('Tested')

    for row in csv.rows:
        # Fill in the BirthYear.
        row[byidx] = max(re.split('[. -]',row[bdidx]),key=len)

        # Fill in the Division.
        # Handle the divisions with numbers first.
        if 'children 8' in row[dividx]:
            division = 'Children 8'
        elif 'children 9' in row[dividx]:
            division = 'Children 9'
        elif 'children 10' in row[dividx]:
            division = 'Children 10'
        elif 'children 11-12' in row[dividx]:
            division = 'Children 11-12'
        elif 'teenagers 13-15' in row[dividx]:
            division = 'Teen 13-15'
        elif 'teenagers 16-17' in row[dividx]:
            division = 'Teen 16-17'
        elif 'teenagers 18-19' in row[dividx]:
            division = 'Teen 18-19'
        elif 'juniors 20-23' in row[dividx]:
            division = 'Juniors 20-23'
        elif 'submasters 33-39' in row[dividx]:
            division = 'Submasters 33-39'
        elif 'masters 40-44' in row[dividx]:
            division = 'Masters 40-44'
        elif 'masters 45-49' in row[dividx]:
            division = 'Masters 45-49'
        elif 'masters 50-54' in row[dividx]:
            division = 'Masters 50-54'
        elif 'masters 55-59' in row[dividx]:
            division = 'Masters 55-59'
        elif 'masters 60-64' in row[dividx]:
            division = 'Masters 60-64'
        elif 'masters 65-69' in row[dividx]:
            division = 'Masters 65-69'
        elif 'masters 70-74' in row[dividx]:
            division = 'Masters 70-74'
        elif 'masters 75-79' in row[dividx]:
            division = 'Masters 75-79'
        elif 'masters 80+' in row[dividx]:
            division = 'Masters 80+'

        elif 'paralympians' in row[dividx]:
            division = 'Paralympian'
        elif 'open' in row[dividx]:
            division = 'Open'
        elif 'masters' in row[dividx]:
            division = 'Masters'
        elif 'mpf' in row[dividx]:
            division = 'Military/Fire/Police'

        elif row[dividx]=='':
            division = 'Open'

        else:
            die('Fix standardize_division_age(): Unknown division "%s"' % row[dividx])

        division = row[testedidx] + ' ' + row[amateuridx] + ' ' + division
        row[dividx] = division.replace('  ',' ').strip()

    # Remove the now-extraneous columns.
    csv.remove_column_by_name('BirthDate')
    csv.remove_column_by_name('Amateur')
    csv.remove_column_by_name('Tested')


#Mark DQs properly and make sure that place is an integer.
def cleanup_place(csv):
    place_idx = csv.index('Place')
    total_idx = csv.index('TotalKg')
    for row in csv.rows:
        if '.00' in row[place_idx]: #Convert place to an integer if it wasn't already
            row[place_idx]=str(int(float(row[place_idx])))

        #Somewhat convoluted way of checking if a lifter is marked DQ and has a nonzero total
        if row[place_idx] == 'DQ' and row[total_idx].replace('.','').replace('-','').isdigit() and float(row[total_idx])!=0.0:
            row[place_idx] ='DD'
            row[total_idx]=''
        elif row[place_idx] == '' and row[total_idx].replace('.','').replace('-','').isdigit() and float(row[total_idx])!=0.0:
            row[place_idx] ='DD'
            row[total_idx]=''
        elif row[place_idx] == 'DT':
            row[place_idx]='DD'
            row[total_idx]=''
        #Everything else is a regular DQ
        elif not row[place_idx] or row[place_idx] == '-' or row[place_idx] =='DOC':
            row[place_idx] = 'DQ'
            row[total_idx]=''
        elif row[total_idx].replace('.','').replace('-','').isdigit() and float(row[total_idx])==0.0:
            row[place_idx] = 'DQ'
            row[total_idx]=''
        elif row[total_idx] == '':
            row[place_idx] = 'DQ'

def cleanup_lift(csv, fieldname):
    if fieldname in csv.fieldnames:
        idx = csv.index(fieldname)

        for row in csv.rows:
            amount = row[idx]

            amount = ''.join(c for c in amount if c.isdigit() or c in ['.','-'])
            amount = amount.replace('.00','').replace('.0','')


            if amount == 'X' or amount.replace('-','') == '0' or not any(c.isdigit() for c in amount):
                amount = ''

            #Sometimes numbers have more than 2 commas, if so remove the second one
            if len([ii for ii, a in enumerate(amount) if a == '.']) >1:
                amount = amount[:amount.rfind('.')]+amount[amount.rfind('.')+1:]



            row[idx] = amount


#Names sometimes have something in brackets after them - extra divisions maybe?
def cleanup_names(csv):
    if 'InternationalName' in csv.fieldnames:
        nameidx = csv.index('InternationalName')
    elif 'Name' in csv.fieldnames:
        nameidx= csv.index('Name')

    for row in csv.rows:
        row[nameidx]= re.sub('\(.*\)','',row[nameidx])
        row[nameidx] = ''.join([c for c in row[nameidx] if not c.isdigit()])
        row[nameidx]=row[nameidx].strip()

def cleanup_bodyweight(csv):
    if 'BodyweightKg' in csv.fieldnames:
        idx = csv.index('BodyweightKg')
        for row in csv.rows:
            row[idx]=row[idx].strip('-')
            if row[idx].replace('.','').isdigit() and float(row[idx]) == 0.0:
                row[idx]=''

def assign_best(csv, liftname):
    idx1 = csv.index('%s1Kg' % liftname)
    idx2 = csv.index('%s2Kg' % liftname)
    idx3 = csv.index('%s3Kg' % liftname)
    bestidx = csv.index('Best%sKg' % liftname)

    def weight(str):
        try:
            return float(str)
        except ValueError:
            return 0.0

    for row in csv.rows:
        best = max(weight(row[idx1]), weight(row[idx2]), weight(row[idx3]))

        if float(best) > 0:
            row[bestidx] = str(best)

def assign_total(csv):

    if 'TotalKg' not in csv.fieldnames:
        csv.append_column('TotalKg')
    idx = csv.index('TotalKg')

    def weight(str):
        try:
            return float(str)
        except ValueError:
            return 0.0

    for row in csv.rows:
        if row[idx] == '':
            total = 0.0
            if 'BestSquatKg' in csv.fieldnames:
                total += weight(row[csv.index('BestSquatKg')])
            if 'BestBenchKg' in csv.fieldnames:
                total += weight(row[csv.index('BestBenchKg')])
            if 'BestDeadliftKg' in csv.fieldnames:
                total += weight(row[csv.index('BestDeadliftKg')])

            if total != 0.0:
                row[idx] = str(total)       




def unreverse_names(csv):

    if 'InternationalName' in csv.fieldnames:
        nameidx = csv.index('InternationalName')
    elif 'Name' in csv.fieldnames:
        nameidx= csv.index('Name')
    for row in csv.rows:
        parts = row[nameidx].split()
        parts = [name.title() for name in parts]

        # The last name is probably the given first name.
        fixed = [parts[-1]] + parts[:-1]
        name = ' '.join(fixed)

        row[nameidx] = name

def main(filename):
    # Since the input is comma-separated, store the file as a list of lists.
    with open(filename) as fd:
        lines = [x.strip().split(',') for x in fd.readlines()]

    # Split the input filename into sheets, each of which is an independent CSV.
    sheetlist = split_by_sheet(lines)

    # Parse each sheet independently, then join them all together into a single CSV.
    csv = oplcsv.Csv()
    for sheet in sheetlist:
        sheetcsv = parse_sheet(sheet)
        csv.cat(sheetcsv)


    for x in ['Squat1Kg', 'Squat2Kg', 'Squat3Kg','Squat4Kg', 'Bench1Kg', 'Bench2Kg', 'Bench3Kg','Bench4Kg',
            'Deadlift1Kg', 'Deadlift2Kg', 'Deadlift3Kg','Deadlift4Kg', 'TotalKg']:
        cleanup_lift(csv, x)

    if 'BestSquatKg' in csv.fieldnames:
    	cleanup_lift(csv,'BestSquatKg')
    if 'BestBenchKg' in csv.fieldnames:
    	cleanup_lift(csv,'BestBenchKg')
    if 'BestDeadliftKg' in csv.fieldnames:
    	cleanup_lift(csv,'BestDeadliftKg')

    if 'BestSquatKg' not in csv.fieldnames and 'Squat1Kg' in csv.fieldnames:
        csv.append_column('BestSquatKg')
        assign_best(csv, 'Squat')
    if 'BestBenchKg' not in csv.fieldnames and 'Bench1Kg' in csv.fieldnames:
        csv.append_column('BestBenchKg')
        assign_best(csv, 'Bench')
    if 'BestDeadliftKg' not in csv.fieldnames and 'Deadlift1Kg' in csv.fieldnames:
        csv.append_column('BestDeadliftKg')
        assign_best(csv, 'Deadlift')

    assign_total(csv)

    # Now it's time to standardize the CSV a little bit!
    # We have some temporary columns hanging out.
    standardize_division_age(csv)
    cleanup_place(csv)
    cleanup_names(csv)
    cleanup_bodyweight(csv)


    csv.write(sys.stdout)
    return 0


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print(" Usage: %s results.csv" % sys.argv[0], file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1])
