#!/usr/bin/env python3
# Given a results.csv as outputted by rpu-parse, parse each sheet one at a time
# and join all the sheets together into an OpenPowerlifting-formatted CSV file.

import sys

sys.path.append('../../../scripts')
sys.path.append('scripts')
import oplcsv
import re

def die(s):
    print(s, file=sys.stderr)
    sys.exit(1)


# Given the array of lines, split it up into an array per-sheet.
def split_by_sheet(lines):
    # Skip past the overview.
    for i in range(len(lines)):
        if 'Sheet' in lines[i][0]:
            break
    assert i < len(lines)
    assert 'Sheet' in lines[i][0]

    sheetlist = []
    sheet = None

    for line in lines[i:]:
        # If this line starts a new sheet, generate a new array.
        if 'Sheet' in line[0]:
            sheet = []
            sheetlist.append(sheet)
        sheet.append(line)

    return sheetlist


# Given the name of a sheet, return a dictionary describing the sheet.
def parse_sheetname(s):
    obj = {}

    event = None
    amateur = 'Pro' # By default, unless otherwise specified.
    equipment = 'Multi-ply' # By default, unless otherwise specified.

    # Parse word-by-word to make sure that every word is understood. 
    s=s.lower()



    s= s.replace('.',' ').replace('"','').replace('_',' ').replace('(',' ').replace(')',' ')
    s = s.replace(' & ','&')

    for word in s.split():
 

        # Events
        if word in ['пл','пауэрлифтинг','pl','пауэрифтинг','пауэлифтинг','ча-пл','ка-пл','паурлифтинг']:
            assert not event
            event = 'SBD'
        elif word == 'присед' or word == 'sq':
            assert not event
            event = 'S'
        elif word in ['жим','bp','bench','жд']:
            assert not event or event == 'B'
            event = 'B'
            if equipment == 'Wraps':
                equipment = 'Raw'
        elif word == 'тяга' or word == 'dl':
            assert not event
            event = 'D'
            if equipment == 'Wraps':
                equipment = 'Raw'
        elif word in ['двоеборье','pp','ж+т','bp+dl','push&pull','cил']:
            assert not event
            event = 'BD'
            if equipment == 'Wraps':
                equipment = 'Raw'

        # Equipment
        elif word in ['однослой','однослое','односл','s ply','однослойной','1-ой','1ply','однослойная','однослойный','однолойной']:
            equipment = 'Single-ply'
        elif word in ['экипировке','m ply','eq','многослой','экипировка']:
            equipment = 'Multi-ply'
        elif word in ['slinghot','sling-shot','soft','СПР','софт','облегченная','облегченной','слинг']:
            equipment = 'Multi-ply'
            event = 'B'
        elif 'бинт' in word or word == 'wraps':
            equipment = 'Wraps'
        elif word in ['безкипировки','raw','безэкип']:
            equipment = 'Raw'

        # Booleans.
        elif word == 'люб.' or word == 'любители':
            amateur = 'Amateur'
        elif word == 'pro' or word == 'pro-':
            assert amateur == 'Pro'


        # Grammatical ignorables.
        elif word == 'в':
            pass
        elif word == 'лежа':
            pass
        elif word == 'на':
            pass
        elif word == 'и':
            pass
        elif word == 'с':
            pass
        elif word == 'ст':
            pass

        # Other ignorables.
        elif word == 'сфо': # Not sure.
            pass
        elif word == 'становая' or word =='стан': # First word in 'deadlift'.
            pass
        elif 'экип' in word: #Equipment
            pass
        elif word == 'handicaped': #We don't seperately track Paralympic bench right now
            pass
        elif word in ['spr','ultra','standart','стандарт','ультра','шоте']: #Extra terms for slingshot bench
            pass
        elif word =='фжд': #Don't know what this means
            pass
        elif word == 'любители' or word =='любит' or word =='люб':#Amateur /Fan?
            pass
        elif word.strip() =='макс' or word =='максимум': #Maximum
            pass
        elif word == 'силовое': #Power. 
            pass
        elif word == 'двоеб': #Double
            pass
        elif word =='дивизион': #Division
            pass
        elif word =='мужчины': #Men
            pass
        elif word == 'воен': #Military
            pass
        elif word == 'лежа-народные': #Something to do with amateur bench, not sure
            pass
        elif word == 'забавы': #Fun? Maybe amateurs
            pass
        elif word =='поток': #Event?
            pass
        elif word.isdigit():
            pass
        else:
            die('Fix parse_sheetname(): Unknown word "%s" in "%s"' % (word, s))
    assert event

    obj['event'] = event
    obj['amateur'] = amateur
    obj['equipment'] = equipment

    return obj


# Find the line that contains column information (the line below does also).
def get_header_linenum(sheet):
    for ii in range(len(sheet)):

        #Find name column
        for ii in range(len(sheet)):
            if 'ФИО' in ''.join(sheet[ii]):
                return ii
    die("get_header_linenum() failed to find the header.")

#Sometimes we get country/city/state instead of just country
def split_country(csv):
    if 'Country/City/State' in csv.fieldnames:
        idx = csv.index('Country/City/State')
        for row in csv.rows:
            parts = row[idx].split('/')

            row[idx] = parts[0]
        csv.fieldnames[idx] = 'Country'





def parse_fieldnames(sheet,obj):
    fieldnames = []

    headernum = get_header_linenum(sheet)
    header = sheet[headernum]
    # Name all the columns.
    iterable = iter(range(len(header)))
    for i in iterable:
        text = header[i].lower().replace('.','')

        if text == '№':
            fieldnames.append('IGNORE')
        elif text == 'фио' or text =='имя' or 'прізвище' in text:
            fieldnames.append('InternationalName')
        elif text == 'name':
            fieldnames.append('Name')
        elif text in['возраст']: 
            fieldnames.append('Age')
        elif 'дата' in text: #Catch all for birthyear 
            fieldnames.append('BirthYear')
        elif text in ['собств вес','собств','соб','вес','собственный вес','собственный','body weight','собcтвенный вес','собст вес','соб вес','собстввес','вага','св','в/к']:
            fieldnames.append('BodyweightKg')
        elif text in ['весовая категория','весовая кат']:
            fieldnames.append('WeightClassKg')
        elif text == 'team':
            fieldnames.append('Team')
        elif any(x in text  for x in['gloss','коэф','resh','залуцкий','рейшел','залутский']):
            fieldnames.append('IGNORE') # This is not the Wilks, but the WilksCoefficient.
        elif text == 'команда' or text =='coach': # Coach
            fieldnames.append('IGNORE')
        elif 'город' in text or 'регіон' in text:
            fieldnames.append('IGNORE') # We don't care about city-level information.
        elif text == 'сountry/city/state' or text =='страна/город/область':
            fieldnames.append('Country/City/State')
        elif text =='итог': #This is place, they only give top three so recalculate
            fieldnames.append('IGNORE')
        elif text =='пол': 
            fieldnames.append('Sex')
        elif text =='дивизион':
            fieldnames.append('Equipment')
        elif text == 'возрастная категория':
            fieldnames.append('Division')
        elif text =='дк':
            fieldnames.append('Tested')



        elif text in ['присед 1','squat 1','присяд 1','приседание 1','sq1','1 присед']:
            assert header[i+1].lower() in ['2','sq2','2 присед']
            assert header[i+2].lower() in ['3','sq3','3 присед']
            fieldnames.append('Squat1Kg')
            fieldnames.append('Squat2Kg')
            fieldnames.append('Squat3Kg')
            if  header[i+3].lower().replace('.','') in ['рек','rec','sq4','4 присед']:
                fieldnames.append('Squat4Kg')
                [next(iterable) for x in range(3)]
            else:
                [next(iterable) for x in range(2)]

        elif text in ['жим','жим 1','benchpress 1','жим макс кг 1','жим на максимум 1','жим вес','жим лежа 1','bp1','1 жим']:
            assert header[i+1].lower() in ['2','bp2','2 жим']
            assert header[i+2].lower() in ['3','bp3','3 жим']
            fieldnames.append('Bench1Kg')
            fieldnames.append('Bench2Kg')
            fieldnames.append('Bench3Kg')
            if  header[i+3].lower().replace('.','') in ['рек','rec','bp4','4 жим']:
                fieldnames.append('Bench4Kg')
                [next(iterable) for x in range(3)]
            else:
                [next(iterable) for x in range(2)]

        elif text in ['тяга','тяга 1','deadlift 1','становая тяга 1','dl1','1 тяга']:
            assert header[i+1].lower() in ['2','dl2','2 тяга']
            assert header[i+2].lower() in ['3','dl3','3 тяга']
            fieldnames.append('Deadlift1Kg')
            fieldnames.append('Deadlift2Kg')
            fieldnames.append('Deadlift3Kg')
            if  header[i+3].lower().replace('.','') in ['рек','rec','dl4','4 тяга']:
                fieldnames.append('Deadlift4Kg')
                [next(iterable) for x in range(3)]
            else:
                [next(iterable) for x in range(2)]


        elif text in ['1 подход']: #Attempts are just labelled "Attempt", use sheet title to find events
            assert header[i+1].lower() in ['2 подход']
            assert header[i+2].lower() in ['3 подход']

            if obj['event'] == 'S':
                fieldnames.append('Squat1Kg')
                fieldnames.append('Squat2Kg')
                fieldnames.append('Squat3Kg')
            elif obj['event'] == 'B':
                fieldnames.append('Bench1Kg')
                fieldnames.append('Bench2Kg')
                fieldnames.append('Bench3Kg') 
            elif obj['event'] == 'D':
                fieldnames.append('Deadlift1Kg')
                fieldnames.append('Deadlift2Kg')
                fieldnames.append('Deadlift3Kg')              

            if header[i+3].lower().replace('.','') in ['4 подход']:
                if obj['event'] == 'S':
                    fieldnames.append('Squat4Kg')
                elif obj['event'] =='B':
                    fieldnames.append('Bench4Kg')
                elif obj['event'] == 'D':
                    fieldnames.append('Deadlift4Kg')

                [next(iterable) for x in range(3)]
            else:
                [next(iterable) for x in range(2)]



        elif text in ['сумма','total','result','сумма баллов','резульат','результат bp','результат']:
            fieldnames.append('TotalKg')


        elif text in['wilks','wpoints','willks','очки','points','vilks','вилкс','абс']: # This is the Wilks. But we prefer to re-calculate it ourselves.
            fieldnames.append('IGNORE')

        elif text == 'тренер':
            fieldnames.append('IGNORE')

        elif 'клуб' in text: #City/Club 
            fieldnames.append('IGNORE')
        elif text == 'страна':
            fieldnames.append('Country')
        elif text == 'норматив спр': #Not sure what this is
            fieldnames.append('IGNORE')
        elif text == '':
            fieldnames.append('IGNORE')

        else:
            die('Fix parse_fieldnames(): Unknown column header text: "%s"' % text)

    return fieldnames


# Given a list of lines all of which belong to the same sheet, parse that
# into an OpenPowerlifting-style CSV.
def parse_sheet(sheet):
    assert 'Sheet' in sheet[0][0]
    assert sheet[0][0].count(':') == 1

    csv = oplcsv.Csv()
    title =sheet[0][0].lower()
    # Ignore some sheets that don't contain any powerlifting.
    if 'судейская кол' in title:
        return csv
    elif 'нж' in title or 'народный' in title:
        # This is the "People's Bench", which I think is bench-for-reps.
        return csv
    elif 'командный зачет' in title:
        return csv #Team results
    elif 'командное первенство' in title:
        return csv
    elif any(x in title for x in ['много','фжд','военный','1 вес','жд любители','армейский','тяговое','военный','двоеборье','1_2 веса']): #Bench reps
        return csv
    elif any(x in title for x in ['корпус','судейски','командный зачёт','абсолютный','судейство']): #Results
        return csv
    elif 'records' in title or 'рекорды' in title:
        return csv
    elif 'крж' in title: #??
        return csv
    elif 'чд' in title: #Not sure what theses pages are, some kind of reps contest
        return csv
    elif 'участников' in title: #Participants
        return csv


    # Figure out event, equipment, etc., and store in obj.
    obj = parse_sheetname(sheet[0][0].split(':')[1])



    # Look through the sheet for column information and mark up the CSV.
    # All columns are given a name -- the extra ones are removed later.
    csv.fieldnames = parse_fieldnames(sheet,obj)


    assert not 'Event' in csv.fieldnames
    csv.fieldnames.append('Event')
    assert not 'Equipment' in csv.fieldnames
    csv.fieldnames.append('Equipment')
    csv.fieldnames.append('Amateur')
    csv.fieldnames.append('Division')

    division = None



    #See if division is above the header
    one_before_header =''.join(sheet[get_header_linenum(sheet)-1])
    two_before_header = ''.join(sheet[get_header_linenum(sheet)-2])
    if 'категория' in one_before_header:
        division = one_before_header
    elif 'категория' in two_before_header:
        division = two_before_header


    # Iterate over each line, skipping the two header lines.
    for line in sheet[get_header_linenum(sheet)+1:]:
        text = ''.join(line)
        # Stop iteration once the 'Best Lifters' section is reached.
        if 'Абсолютный' in text or 'List absolute winners' in text or text=='Мужчины' or 'Возрастная группа' in text or text=='Женщины':
            break
        # Skip empty lines.
        if text == '':
            continue
        elif '№' in text: #Skip extra headers
            continue



        #Detect lines that set division
        if 'категория' in text:
            division = text
            continue

        # If we've made it this far, the line should be for a lifter!
        # Make sure they have a name!
        if 'InternationalName' in csv.fieldnames and not line[csv.index('InternationalName')]:
            continue
        if 'Name' in csv.fieldnames and not line[csv.index('Name')]:
            continue


            line[totalidx] = str(max(weight(line[idx1]), weight(line[idx2]), weight(line[idx3])))

        line.append(obj['event'])
        line.append(obj['equipment'])
        line.append(obj['amateur'])
        line.append(division)
        assert len(line) == len(csv.fieldnames)
        csv.rows.append(line)

    # Remove all the columns named 'IGNORE' before returning the CSV for integration.
    while 'IGNORE' in csv.fieldnames:
        csv.remove_column_by_name('IGNORE')

    unreverse_names(csv)

    return csv


# Handles the Division column
# Converts to English and separates into Division and Age columns.
def standardize_division(csv):
    assert 'Division' in csv.fieldnames
    assert 'Amateur' in csv.fieldnames

    dividx = csv.index('Division')
    amateuridx = csv.index('Amateur')
    for row in csv.rows:
        row[dividx]=row[dividx].replace(' - ','-')
        row[dividx]=row[dividx].replace('"','')
        row[dividx]= row[dividx].lower()

        row[dividx]=row[dividx].replace('абсолютка','')
        row[dividx]=row[dividx].replace('категория','')
        row[dividx]=row[dividx].replace('присед','')
        row[dividx]=row[dividx].replace('до','')
        row[dividx]=row[dividx].replace('пауэрлифтинг','')
        row[dividx]=row[dividx].replace('лет','')
        row[dividx]=row[dividx].replace('включительно','')
        row[dividx]=row[dividx].replace('жим','')
        row[dividx]=row[dividx].replace('лежа','')

        

        row[dividx]=row[dividx].strip()

        # Fill in the Division.
        # Handle the divisions with numbers first.
        if '18+' in row[dividx]:
            division = 'Open'
        elif '18' in row[dividx]:
            division = 'Teen under 18'
        elif '16-17' in row[dividx]:
            division = 'Teen 16-17'
        elif '15' in row[dividx]:
            division = 'Teen under 15'
        elif 'девушки' in row[dividx]:
            division = 'Women'
        else:
            die('Fix standardize_division_age(): Unknown division "%s"' % row[dividx])

        division = row[amateuridx] + ' ' + division
        row[dividx] = division.replace('  ',' ').strip()

    # Remove the now-extraneous columns.
    csv.remove_column_by_name('Amateur')



        
def unreverse_names(csv):

    if 'InternationalName' in csv.fieldnames:
        nameidx = csv.index('InternationalName')
    elif 'Name' in csv.fieldnames:
        nameidx= csv.index('Name')
    for row in csv.rows:
        parts = row[nameidx].split()
        parts = [name.title() for name in parts]

        # The last name is probably the given first name.
        fixed = [parts[-1]] + parts[:-1]
        name = ' '.join(fixed)

        row[nameidx] = name

#Names sometimes have something in brackets after them - extra divisions maybe?
def cleanup_names(csv):
    if 'InternationalName' in csv.fieldnames:
        nameidx = csv.index('InternationalName')
    elif 'Name' in csv.fieldnames:
        nameidx= csv.index('Name')

    for row in csv.rows:
        row[nameidx]= re.sub('\(.*\)','',row[nameidx])
        row[nameidx]=row[nameidx].strip()

def cleanup_lift(csv, fieldname):
    if fieldname in csv.fieldnames:
        idx = csv.index(fieldname)

        for row in csv.rows:
            amount = row[idx]

            amount = ''.join(c for c in amount if c.isdigit() or c in ['.','-'])
            amount = amount.replace('.00','').replace('.0','')


            if amount == 'X' or amount.replace('-','') == '0' or not any(c.isdigit() for c in amount):
                amount = ''

            #Sometimes numbers have more than 2 commas, if so remove the second one
            if len([ii for ii, a in enumerate(amount) if a == '.']) >1:
                amount = amount[:amount.rfind('.')]+amount[amount.rfind('.')+1:]

            row[idx] = amount


#Remove '.0' from weightclasses
def cleanup_weightclass(csv):
    idx = csv.index('WeightClassKg')
    for row in csv.rows:
        if '.0' in row[idx]:
            row[idx] = row[idx].replace('.0','')

#Sometimes weight class is also given after bodyweight
def cleanup_bodyweight(csv):
    idx = csv.index('BodyweightKg')
    for row in csv.rows:
        row[idx]=row[idx].split()[0]


def assign_best(csv, liftname):
    idx1 = csv.index('%s1Kg' % liftname)
    idx2 = csv.index('%s2Kg' % liftname)
    idx3 = csv.index('%s3Kg' % liftname)
    bestidx = csv.index('Best%sKg' % liftname)

    def weight(str):
        try:
            return float(str)
        except ValueError:
            return 0.0

    for row in csv.rows:
        best = max(weight(row[idx1]), weight(row[idx2]), weight(row[idx3]))

        if float(best) > 0:
            row[bestidx] = str(best)


def assign_total(csv):

    if 'TotalKg' not in csv.fieldnames:
        csv.append_column('TotalKg')
    idx = csv.index('TotalKg')

    def weight(str):
        try:
            return float(str)
        except ValueError:
            return 0.0

    for row in csv.rows:
        if row[idx] == '':
            total = 0.0
            if 'BestSquatKg' in csv.fieldnames:
                total += weight(row[csv.index('BestSquatKg')])
            if 'BestBenchKg' in csv.fieldnames:
                total += weight(row[csv.index('BestBenchKg')])
            if 'BestDeadliftKg' in csv.fieldnames:
                total += weight(row[csv.index('BestDeadliftKg')])

            if total != 0.0:
                row[idx] = str(total) 


def main(filename):
    # Since the input is comma-separated, store the file as a list of lists.
    with open(filename) as fd:
        lines = [x.strip().split(',') for x in fd.readlines()]

    # Split the input filename into sheets, each of which is an independent CSV.
    sheetlist = split_by_sheet(lines)

    # Parse each sheet independently, then join them all together into a single CSV.
    csv = oplcsv.Csv()
    for sheet in sheetlist:
        sheetcsv = parse_sheet(sheet)
        csv.cat(sheetcsv)


    for x in ['Squat1Kg', 'Squat2Kg', 'Squat3Kg','Squat4Kg', 'Bench1Kg', 'Bench2Kg', 'Bench3Kg','Bench4Kg',
            'Deadlift1Kg', 'Deadlift2Kg', 'Deadlift3Kg','Deadlift4Kg', 'TotalKg']:
        cleanup_lift(csv, x)

    if 'BestSquatKg' in csv.fieldnames:
        cleanup_lift(csv,'BestSquatKg')
    if 'BestBenchKg' in csv.fieldnames:
        cleanup_lift(csv,'BestBenchKg')
    if 'BestDeadliftKg' in csv.fieldnames:
        cleanup_lift(csv,'BestDeadliftKg')

    if 'BestSquatKg' not in csv.fieldnames and 'Squat1Kg' in csv.fieldnames:
        csv.append_column('BestSquatKg')
        assign_best(csv, 'Squat')
    if 'BestBenchKg' not in csv.fieldnames and 'Bench1Kg' in csv.fieldnames:
        csv.append_column('BestBenchKg')
        assign_best(csv, 'Bench')
    if 'BestDeadliftKg' not in csv.fieldnames and 'Deadlift1Kg' in csv.fieldnames:
        csv.append_column('BestDeadliftKg')
        assign_best(csv, 'Deadlift')


    # Now it's time to standardize the CSV a little bit!
    # We have some temporary columns hanging out.
    standardize_division(csv)
    cleanup_names(csv)
    cleanup_weightclass(csv)
    cleanup_bodyweight(csv)

    assign_total(csv)


    csv.write(sys.stdout)
    return 0


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print(" Usage: %s results.csv > entries.csv" % sys.argv[0])
        sys.exit(1)
    sys.exit(main(sys.argv[1]))
